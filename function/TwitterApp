import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;

public class SimpleTwitterApp extends JFrame {
    private static Connection connection;
    private JTextField useridField, usernameField, useremailField, passwordField, followField, tweetField;
    private JTextArea feedArea;
    private boolean isLoggedIn = false;
    private JComboBox<String> userComboBox;
    private String userid = null;
    
    public SimpleTwitterApp() {
        //Initialize GUI components
        useridField = new JTextField(10);
        usernameField = new JTextField(10);
        useremailField = new JTextField(20);
        passwordField = new JPasswordField(10);
        followField = new JTextField(10);
        tweetField = new JTextField(30);
        feedArea = new JTextArea(10, 30);
        userComboBox = new JComboBox<>();

        JButton createUserButton = new JButton("Create User");
        JButton followButton = new JButton("Follow");
        JButton postButton = new JButton("Post");

        //Connect to the database
        connectToDatabase();

        //Set up the GUI layout
        setLayout(new BorderLayout());

        JPanel userPanel = new JPanel();
        userPanel.setBackground(new Color(126, 210, 255)); //배경 색상
        
        JButton loginButton = new JButton("Login");
        loginButton.setBackground(new Color(255, 255, 255)); //버튼 색상
        loginButton.setForeground(Color.BLUE); //텍스트 색상
        
        if (!isLoggedIn) {
            //로그인 필드 및 버튼
            JTextField loginIdField = new JTextField(10);
            JPasswordField loginPasswordField = new JPasswordField(10);

            userPanel.add(new JLabel("UserID:"));
            userPanel.add(loginIdField);
            userPanel.add(new JLabel("Password:"));
            userPanel.add(loginPasswordField);
            userPanel.add(loginButton);
            

            //로그인 버튼 액션 처리
            loginButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    //로그인 로직 수행
                    String inputId = loginIdField.getText();
                    String inputPassword = new String(loginPasswordField.getPassword());

                    if (inputId.isEmpty() || inputPassword.isEmpty()) {
                        //아이디 또는 비밀번호가 비어있으면 오류 메시지 표시
                        JOptionPane.showMessageDialog(SimpleTwitterApp.this, "아이디와 비밀번호를 모두 입력하세요.", "입력 오류", JOptionPane.ERROR_MESSAGE);
                        return; //로그인 로직 수행하지 않고 종료
                    }
                    if (checkLogin(inputId, inputPassword)) {
                        isLoggedIn = true;
                        JOptionPane.showMessageDialog(SimpleTwitterApp.this, "로그인 되었습니다.", "로그인 성공", JOptionPane.INFORMATION_MESSAGE);

                        //로그인 상태에 따라 컴포넌트를 숨기거나 보이게 설정
                        loginIdField.setVisible(false);
                        loginPasswordField.setVisible(false);
                        loginButton.setVisible(false);

                        //로그아웃 버튼 추가
                        JButton logoutButton = new JButton("Logout");
                        logoutButton.setBackground(new Color(255, 255, 255)); //버튼 색상
                        logoutButton.setForeground(Color.BLUE); //텍스트 색상
                        userPanel.add(logoutButton);

                        //로그아웃 버튼 액션 처리
                        logoutButton.addActionListener(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent e) {
                                isLoggedIn = false;
                                JOptionPane.showMessageDialog(SimpleTwitterApp.this, "로그아웃 되었습니다.", "로그아웃", JOptionPane.INFORMATION_MESSAGE);
                                //로그아웃 시 피드 영역을 비우기
                                feedArea.setText("");
                                //로그인 상태에 따라 컴포넌트를 숨기거나 보이게 설정
                                loginIdField.setVisible(true);
                                loginPasswordField.setVisible(true);
                                loginButton.setVisible(true);

                                //로그아웃 버튼 제거
                                userPanel.remove(logoutButton);

                                //변경 사항을 반영하기 위해 userPanel 다시 그리기
                                userPanel.revalidate();
                                userPanel.repaint();
                            }
                        });

                        //로그인 성공 후 사용자 피드 표시
                        displayUserFeed(inputId);
                        //로그인 성공 후 필드 비우기
                        loginIdField.setText("");
                        loginPasswordField.setText("");
                    } else {
                        JOptionPane.showMessageDialog(SimpleTwitterApp.this, "아이디 또는 비밀번호가 일치하지 않습니다.", "로그인 실패", JOptionPane.ERROR_MESSAGE);
                    }
                }
            });
        } else {
            //로그인된 경우에는 로그아웃 버튼 표시
            JButton logoutButton = new JButton("Logout");
            userPanel.add(logoutButton);

            //로그아웃 버튼 액션 처리
            logoutButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    isLoggedIn = false;
                    JOptionPane.showMessageDialog(SimpleTwitterApp.this, "로그아웃 되었습니다.", "로그아웃", JOptionPane.INFORMATION_MESSAGE);
                    //로그아웃 시 피드 영역을 비우기
                    feedArea.setText("");
                    //로그인 버튼 텍스트를 "Login"으로 변경
                    loginButton.setText("Login");
                }
            });
        }
        userPanel.add(createUserButton);
        createUserButton.setBackground(new Color(255, 255, 255));
        createUserButton.setForeground(Color.BLUE);

        //피드 영역을 JScrollPane로 감싸서 스크롤 가능하게
        JScrollPane feedScrollPane = new JScrollPane(feedArea);
        feedScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        
        //피드 영역 왼쪽에 새로운 영역을 추가할 패널을 생성
        JPanel feedLeftPanel = new JPanel();
        feedLeftPanel.setLayout(new BoxLayout(feedLeftPanel, BoxLayout.Y_AXIS));
        feedLeftPanel.setBackground(new Color(255, 255, 255));

        //팔로잉 목록 버튼
        JButton followingButton = new JButton("Following");
        setButtonSize(followingButton);
        followingButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //팔로잉 목록 보기 로직 추가
                displayFollowingList();
                //팔로우할 수 있는 user검색 후 팔로우 기능
                displayFollowableUsers();
            }
        });
        feedLeftPanel.add(followingButton);
        followingButton.setBackground(new Color(255, 255, 255));
        followingButton.setForeground(Color.BLUE);

        //팔로워 목록 버튼
        JButton followersButton = new JButton("Followers");
        setButtonSize(followersButton);
        followersButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //팔로워 목록 보기 로직 추가
                displayFollowersList();
            }
        });
        feedLeftPanel.add(followersButton);
        followersButton.setBackground(new Color(255, 255, 255));
        followersButton.setForeground(Color.BLUE);

        //비밀번호 변경 버튼
        JButton changePasswordButton = new JButton("<html>Change<br>Password</html>");
        setButtonSize(changePasswordButton);
        changePasswordButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //비밀번호 변경 창 열기 로직 추가
                openChangePasswordDialog();
            }
        });
        feedLeftPanel.add(changePasswordButton);
        changePasswordButton.setBackground(new Color(255, 255, 255));
        changePasswordButton.setForeground(Color.BLUE);
        
        //트윗 버튼 추가
        JButton tweetActionButton = new JButton("Tweet");
        setButtonSize(tweetActionButton);
        tweetActionButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //트윗을 작성하고 게시하기 위한 대화 상자 열기
                openTweetDialog();
            }
        });
        // 트윗 버튼을 userPanel에 추가
        feedLeftPanel.add(tweetActionButton);
        tweetActionButton.setBackground(new Color(255, 255, 255));
        tweetActionButton.setForeground(Color.BLUE);
        
        // 전체 레이아웃 구성
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());
        mainPanel.add(feedScrollPane, BorderLayout.CENTER);
        mainPanel.add(userPanel, BorderLayout.NORTH);
        //피드 영역의 왼쪽에 패널 추가
        mainPanel.add(feedLeftPanel, BorderLayout.WEST);
        //왼쪽 패널 크기 조정
        feedLeftPanel.setPreferredSize(new Dimension(200, feedLeftPanel.getHeight()));
        add(mainPanel, BorderLayout.CENTER);
        
        //회원가입 다이얼로그 생성
        createUserButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //다이얼로그 생성
                JDialog createUserDialog = new JDialog(SimpleTwitterApp.this, "Create User", true);
                createUserDialog.setLayout(new BorderLayout());

                //입력 필드 및 레이블 추가
                JTextField userIdField = new JTextField(10);
                JTextField userNameField = new JTextField(10);
                JTextField userEmailField = new JTextField(20);
                JPasswordField userPasswordField = new JPasswordField(10);

                JPanel inputPanel = new JPanel(new GridLayout(4, 2));
                inputPanel.add(new JLabel("UserID:"));
                inputPanel.add(userIdField);
                inputPanel.add(new JLabel("Username:"));
                inputPanel.add(userNameField);
                inputPanel.add(new JLabel("User Email:"));
                inputPanel.add(userEmailField);
                inputPanel.add(new JLabel("Password:"));
                inputPanel.add(userPasswordField);

                createUserDialog.add(inputPanel, BorderLayout.CENTER);

                //확인 버튼 추가
                JButton okButton = new JButton("OK");
                okButton.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        //입력된 정보를 사용하여 사용자 생성
                        String userId = userIdField.getText();
                        String userName = userNameField.getText();
                        String userEmail = userEmailField.getText();
                        String userPassword = new String(userPasswordField.getPassword());

                        //사용자 생성 메서드 호출
                        createUser(userId, userName, userEmail, userPassword);

                        //다이얼로그 종료
                        createUserDialog.dispose();
                    }
                });

                //취소 버튼 추가
                JButton cancelButton = new JButton("Cancel");
                cancelButton.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        //다이얼로그 종료
                        createUserDialog.dispose();
                    }
                });

                JPanel buttonPanel = new JPanel();
                buttonPanel.add(okButton);
                buttonPanel.add(cancelButton);
                createUserDialog.add(buttonPanel, BorderLayout.SOUTH);

                //다이얼로그 크기와 위치 설정
                createUserDialog.setSize(300, 150);
                createUserDialog.setLocationRelativeTo(SimpleTwitterApp.this);
                createUserDialog.setVisible(true);
            }
        });

        followButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Get the selected or entered username from the userComboBox
                String followingUsername = userComboBox.getSelectedItem().toString();
                if (followingUsername.isEmpty()) {
                    JOptionPane.showMessageDialog(SimpleTwitterApp.this, "Please enter a username to follow.", "Info", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                
                // Call the followUser method
                followUser(followingUsername);
            }
        });
        postButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String tweetContent = tweetField.getText();
                postTweet(tweetContent);
            }
        });
    }

    private void connectToDatabase() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/twitter?serverTimezone=UTC&useSSL=false", "root", "12345");
            System.out.println(connection); //추가 \
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to the database.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private boolean checkLogin(String inputId, String inputPassword) {
        try {
            String query = "SELECT * FROM User WHERE UserID = ? AND Password = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, inputId);
                preparedStatement.setString(2, inputPassword);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    return resultSet.next(); 
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            return false;
        }
    }
    
    private void createUser(String userID, String name, String email, String password) {
        try {
            String query = "INSERT INTO User (UserID, Name, Email, Password) VALUES (?, ?, ?, ?)";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, userID);
                preparedStatement.setString(2, name);
                preparedStatement.setString(3, email);
                preparedStatement.setString(4, password);
                preparedStatement.executeUpdate();
            }
            JOptionPane.showMessageDialog(this, "User created successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error creating user.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

 // 새로 열리는 창 설정
    private void openInputDialog(String title, String okButtonText, ActionListener okAction, String[] labels, JComponent[] components) {
        JDialog dialog = new JDialog(this, title, true);
        dialog.setLayout(new BorderLayout());

        JPanel inputPanel = new JPanel(new GridLayout(labels.length, 2));
        for (int i = 0; i < labels.length; i++) {
            inputPanel.add(new JLabel(labels[i]));
            inputPanel.add(components[i]);
        }

        dialog.add(inputPanel, BorderLayout.CENTER);

        JButton okButton = new JButton(okButtonText);
        okButton.addActionListener(okAction);

        JButton cancelButton = new JButton("Cancel");
        cancelButton.addActionListener(e -> dialog.dispose());

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(okButton);
        buttonPanel.add(cancelButton);
        dialog.add(buttonPanel, BorderLayout.SOUTH);

        dialog.setSize(300, 150);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }

    // Tweet창 열기
    private void openTweetDialog() {
        JTextField tweetContentField = new JTextField(30);
        JLabel label = new JLabel("write the comment for tweet: ");

        openInputDialog("Write Tweet", "Tweet", e -> {
            String tweetContent = tweetContentField.getText().trim();
            if (tweetContent.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Tweet comment is empty.", "error", JOptionPane.WARNING_MESSAGE);
                return;
            }
            postTweet(tweetContent);
        }, new String[]{"", "Write for Tweet:"}, new JComponent[]{new JPanel(), tweetContentField});
    }
    //Change Passaword창 열기
    private void openChangePasswordDialog() {
        JPasswordField currentPasswordField = new JPasswordField(10);
        JPasswordField newPasswordField = new JPasswordField(10);
        JPasswordField confirmPasswordField = new JPasswordField(10);

        openInputDialog("Change Password", "Change Password", e -> {
            String currentPassword = new String(currentPasswordField.getPassword());
            String newPassword = new String(newPasswordField.getPassword());
            String confirmPassword = new String(confirmPasswordField.getPassword());

            if (!checkLogin(userid, currentPassword)) {
                JOptionPane.showMessageDialog(null, "현재 비밀번호가 일치하지 않습니다.", "입력 오류", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (!newPassword.equals(confirmPassword)) {
                JOptionPane.showMessageDialog(null, "새 비밀번호와 확인 비밀번호가 일치하지 않습니다.", "입력 오류", JOptionPane.WARNING_MESSAGE);
                return;
            }

            updatePassword(userid, newPassword);
        }, new String[]{"Current Password:", "New Password:", "Confirm New Password:"}, new JComponent[]{currentPasswordField, newPasswordField, confirmPasswordField});
    }

    private void postTweet(String tweetContent) {
        try {
            if (!isLoggedIn) {
                JOptionPane.showMessageDialog(this, "로그인 후에 트윗할 수 있습니다.", "로그인 필요", JOptionPane.WARNING_MESSAGE);
                return;
            }
            System.out.println(tweetContent);
            String currentUser = usernameField.getText();
            String tweetId = generateTweetId();
            //TweetID 중복 확인
            while (isTweetIdDuplicate(tweetId)) {
                tweetId = generateTweetId();
            }
            String timestamp = new java.text.SimpleDateFormat("yyyy.MM.dd.HH:mm").format(new java.util.Date());
            String query = "INSERT INTO Tweet (TweetID, WriterID, Content, Timestamp) VALUES (?, ?, ?, ?)";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, tweetId);
                preparedStatement.setString(2, currentUser);
                preparedStatement.setString(3, tweetContent);
                preparedStatement.setString(4, timestamp);
                preparedStatement.executeUpdate();
            }

            query = "INSERT INTO Timeline (UserID, timestamp, TweetID) VALUES (?, ?, ?)";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, currentUser);
                preparedStatement.setString(2, timestamp);
                preparedStatement.setString(3, tweetId);
                preparedStatement.executeUpdate();
            }

            JOptionPane.showMessageDialog(this, "Tweet posted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

            // 트윗이 성공적으로 게시되면 직접 feedArea를 업데이트합니다.
            displayUserFeed(currentUser);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error posting tweet.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private String generateTweetId() {
        return String.valueOf(System.currentTimeMillis());
    }
    //트윗 id 중복 확인
    private boolean isTweetIdDuplicate(String tweetId) throws SQLException {
        String query = "SELECT * FROM Tweet WHERE TweetID = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, tweetId);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                return resultSet.next();
            }
        }
    }
    
    private void displayUserFeed(String username) {
        try {
            String queryUserId = "SELECT UserID FROM User WHERE UserID = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(queryUserId)) {
                preparedStatement.setString(1, username);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (!resultSet.next()) {
                        JOptionPane.showMessageDialog(this, "Current user not found.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }

            String query = "SELECT t.Content, t.Timestamp FROM Tweet t " +
                    "JOIN Timeline tl ON t.TweetID = tl.TweetID " +
                    "WHERE tl.UserID = ? OR tl.UserID IN (SELECT followingID FROM Follower WHERE UserID = ?)";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, username);
                preparedStatement.setString(2, username);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    StringBuilder feed = new StringBuilder();
                    while (resultSet.next()) {
                        String content = resultSet.getString("Content");
                        String timestamp = resultSet.getString("Timestamp");
                        feed.append("[").append(timestamp).append("] ").append(content).append("\n");
                    }
                    feedArea.setText(feed.toString());
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error displaying feed.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    //팔로잉 목록 보기
    private void displayFollowingList() {
       
        try {
            String currentUser = usernameField.getText();
            String query = "SELECT followingID FROM Follower WHERE UserID = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, currentUser);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    StringBuilder followingList = new StringBuilder("Following List:\n");
                    while (resultSet.next()) {
                        String followingID = resultSet.getString("followingID");
                        followingList.append(followingID).append("\n");
                    }
                    JTextArea followingTextArea = new JTextArea(followingList.toString());
                    followingTextArea.setEditable(false);
                    JOptionPane.showMessageDialog(this, new JScrollPane(followingTextArea), "Following List", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error displaying following list.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    //팔로우 할 수 있는 user검색 후 팔로우 기능
    private void displayFollowableUsers() {
        try {
            String query = "SELECT UserID FROM User WHERE UserID != ?";
            String currentUser = usernameField.getText();
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, currentUser);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    JComboBox<String> followableUsersComboBox = new JComboBox<>();
                    followableUsersComboBox.setEditable(true);
                    while (resultSet.next()) {
                        String userID = resultSet.getString("UserID");
                        followableUsersComboBox.addItem(userID);
                    }
                    JOptionPane.showMessageDialog(this, followableUsersComboBox, "Follow User", JOptionPane.INFORMATION_MESSAGE);
                    String selectedUser = followableUsersComboBox.getSelectedItem().toString();
                    followUser(selectedUser);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error displaying followable users.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    //팔로워 목록 보기
    private void displayFollowersList() {
          try {
               String currentUser = usernameField.getText();
               String query = "SELECT UserID FROM Follower WHERE followingID = ?";
               try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                   preparedStatement.setString(1, currentUser);
                   try (ResultSet resultSet = preparedStatement.executeQuery()) {
                       JComboBox<String> followersComboBox = new JComboBox<>();
                       followersComboBox.setEditable(true);
                       while (resultSet.next()) {
                           String followerId = resultSet.getString("UserID");
                           followersComboBox.addItem(followerId);
                       }
                       JOptionPane.showMessageDialog(this, followersComboBox, "Followers List", JOptionPane.INFORMATION_MESSAGE);
                   }
               }
           } catch (SQLException e) {
               e.printStackTrace();
               JOptionPane.showMessageDialog(this, "Error displaying followers list.", "Error", JOptionPane.ERROR_MESSAGE);
           }
    }
    //팔로우 유저 확인하기
    private void followUser(String followingUsername) {
        try {
            String currentUser = usernameField.getText();
            if (!isFollowing(currentUser, followingUsername)) {
                // Check if the user exists before attempting to follow
                if (userExists(followingUsername)) {
                    String query = "INSERT INTO Follower (UserID, followingID) VALUES (?, ?)";
                    try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                        preparedStatement.setString(1, currentUser);
                        preparedStatement.setString(2, followingUsername);
                        preparedStatement.executeUpdate();
                    }
                    JOptionPane.showMessageDialog(this, "You are now following " + followingUsername, "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "User " + followingUsername + " does not exist.", "Info", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "You are already following " + followingUsername, "Info", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error following user.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Helper method to check if a user exists
    private boolean userExists(String username) throws SQLException {
        String query = "SELECT * FROM User WHERE UserID = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, username);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                return resultSet.next();
            }
        }
    }


    private boolean isFollowing(String followerId, String followingId) throws SQLException {
        String query = "SELECT * FROM Follower WHERE UserID = ? AND followingID = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, followerId);
            preparedStatement.setString(2, followingId);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                return resultSet.next();
            }
        }
    }
    

    //비밀번호 업데이트 메서드
    private void updatePassword(String userId, String newPassword) {
        try {
            String query = "UPDATE User SET Password = ? WHERE UserID = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, newPassword);
                preparedStatement.setString(2, userId);
                preparedStatement.executeUpdate();
            }
            JOptionPane.showMessageDialog(this, "비밀번호가 성공적으로 변경되었습니다.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "비밀번호 변경 중 오류가 발생했습니다.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    //팔로우 메서드
   public static void Follow(String userID, String followID) {                             // 유저1이 유저2를 팔로우하는 상황 가정
      String insertFollowingQuery = "INSERT INTO Following (UserID, FollowerID) VALUES (?, ?)"; // 유저1의 팔로잉 목록에 유저2를 업데이트
      String insertFollowerQuery = "INSERT INTO Follower (UserID, FollowingID) VALUES (?, ?)";  // 유저2의 팔로워 목록에 유저1을 업데이트
      try {
         PreparedStatement preparedStatement = connection.prepareStatement(insertFollowingQuery);
         preparedStatement.setString(1, userID);
         preparedStatement.setString(2, followID);
         PreparedStatement preparedStatement2 = connection.prepareStatement(insertFollowerQuery);
         preparedStatement2.setString(1, followID);
         preparedStatement2.setString(2, userID);
         preparedStatement.executeUpdate();
         preparedStatement2.executeUpdate();
         System.out.println(userID + "(이)가 " + followID +"(을)를 팔로우했습니다.");
      } catch (SQLException e) {
         e.printStackTrace();
         System.err.println("팔로우에 실패했습니다.");
      }
   }
   public static void FollowingList(String UserID) { // 유저의 팔로잉 목록 확인
      String selectFollowingQuery = "SELECT FollowerID FROM Following WHERE UserID=?";
      try {
         PreparedStatement preparedStatement = connection.prepareStatement(selectFollowingQuery);
         preparedStatement.setString(1, UserID);
         ResultSet resultSet = preparedStatement.executeQuery();

         if (resultSet.next()) {
            System.out.println(UserID + "의 팔로잉 목록");
            do {
               String FollowerID = resultSet.getString("FollowerID");
               System.out.println(FollowerID);
            } while(resultSet.next());
         } else {
            System.out.println(UserID + "사용자의 팔로잉 목록이 존재하지 않습니다.");
         }
      } catch (SQLException e) {
         e.printStackTrace();
         System.err.println("팔로잉 목록 오류가 발생했습니다.");
      }
   }
   
   public static void FollowerList(String UserID) { // 유저의 팔로워 목록 확인
      String selectFollowerQuery = "SELECT FollowingID FROM Follower WHERE UserID=?";
      try {
         PreparedStatement preparedStatement = connection.prepareStatement(selectFollowerQuery);
         preparedStatement.setString(1, UserID);
         ResultSet resultSet = preparedStatement.executeQuery();

         if (resultSet.next()) {
            System.out.println(UserID + "의 팔로워 목록");
            do {
               String FollowingID = resultSet.getString("FollowingID");
               System.out.println(FollowingID);
            } while(resultSet.next());
         } else {
            System.out.println(UserID + "사용자의 팔로워 목록이 존재하지 않습니다.");
         }
      } catch (SQLException e) {
         e.printStackTrace();
         System.err.println("팔로워 목록 오류가 발생했습니다.");
      }
   }
    //버튼 크기 설정
    private void setButtonSize(JButton button) {
        Dimension buttonSize = new Dimension(200, 80); // 원하는 크기로 조절
        button.setPreferredSize(buttonSize);
        button.setMaximumSize(buttonSize);
        button.setMinimumSize(buttonSize);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            SimpleTwitterApp app = new SimpleTwitterApp();
            app.setSize(600, 400);
            app.setTitle("Twitter");
            app.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            app.setVisible(true);
        });
    }
}

